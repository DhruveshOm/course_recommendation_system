import pandas as pd
import numpy as np
import re
courses = pd.read_csv('Coursera.csv')
course = pd.read_csv('coursea_data.csv')
courses.head(2)

# Course Name
# Course Rating
# tag = Course Description + Skills
#couse_certification_type
#couse_rating
#couse_difficulty
#course_students_enrolledment
course = course[['ID','course_Certificate_type','course_rating','course_difficulty','course_students_enrolled']]
courses  = courses[['Course','University','Course Rating','Course Description','Skills']]
# courses.info
# courses.isnull().sum()
courses.duplicated()
# course['course_students_enrolled'][0]
# course['ID']
# courses.head()
course['tag'] = (
    course['course_Certificate_type'].astype(str) + '_' +
    course['course_difficulty'].astype(str) 
    # course['course_rating'].astype(str) + '_' +
    # course['course_students_enrolled'].astype(str)
)
# course['tag']
course.head()
courses['Tag'] = (
    courses['University'].astype(str) + '.' +
    courses['Skills'].astype(str)+ '.' +
    courses['Course'].astype(str)+
    courses['Course Description'].astype(str)
)
# course.head()
new_d = course[['ID','course_rating','course_students_enrolled','tag']]
new_dff = courses[['Course','Course Rating','Tag']]
new_dff.head()
new_dff['Tag'] = new_dff['Tag'].apply(lambda x:x.lower())  # lowercase conversion
new_dff['tagc'] = new_dff['Tag'].apply(lambda x: re.sub(r'[\\/,\'"]', '', x)) #remove \ ,'""
# new_dff.head()
new_dff['Tag'][0]
#  converting tags into vector form ; using bag of word techquie
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')
vectors = cv.fit_transform(new_dff['tagc']).toarray()
vectors
# first course tag in vector form 
vectors[0]
cv.get_feature_names_out()
import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
#  ps.stem() used to change 2 , 3 for of verb into first .(give the root term)
def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)
new_dff['tagc']=new_dff['tagc'].apply(stem)
ps.stem('write a full length feature film script  in this course, you will write a complete, feature-length screenplay for film or television, be it a serious drama or romantic comedy or anything in between. you�ll learn to break down the creative process into components, and you�ll discover a structured process that allows you to produce a polished and pitch-ready script by the end of the course. completing this project will increase your confidence in your ideas and abilities, and you�ll feel prepared to pitch your first script and get started on your next. this is a course designed to tap into your creativity and is based in "active learning". most of the actual learning takes place within your own activities - that is, writing! you will learn by doing.  here is a link to a trailer for the course. to view the trailer, please copy and paste the link into your browser. https://vimeo.com/382067900/b78b800dc0  learner review: love the approach professor wheeler takes towards this course. its to the point, easy to follow, and very informative! would definitely recommend it to anyone who is interested in taking a screenplay writing course!  the course curriculum is simple: we will adopt a professional writers room process in which you�ll write, post your work for peer review, share feedback with your peers and revise your work with the feedback you receive from your peers. thats how we do it in the real world. you will feel as if you were in a professional writers room yet no prior experience as a writer is required. im a proponent of experiential learning (active learning). my lectures are short (sometimes just two minutes long) and to the point, designed in a step-by-step process essential to your success as a script writer. i will guide you but i won�t "show" you how to write. i firmly believe that the only way to become a writer is to write, write, write.  learner review: i would like to thank this course instructor. it an amazing course  what you�ll need to get started: as mentioned above, no prior script writing experience is required. to begin with, any basic word processor will do. during week two, you can choose to download some free scriptwriting software such as celtx or trelby or you may choose to purchase final draft, the industry standard, or you can continue to use your word processor and do your own script formatting.   learner review: now i am a writer! if you have any concerns regarding the protection of your original work, coursera privacy policy protects the learner ip and you are indeed the sole owners of your work..drama  comedy  peering  screenwriting  film  document review  dialogue  creative writing  writing  unix shells arts-and-humanities music-and-art.write a feature length screenplay for film or television')
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')
vectors = cv.fit_transform(new_dff['tagc']).toarray()
cv.get_feature_names_out().size
from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)
new_dff['Course'][2892]
# sorted(similarity[0],reverse=True)                       # it sort the elements but does not hold index
# sorted(list(enumerate(similarity[0])),reverse=True)      #it sort and store index of elements but on the basis of index

sorted(list(enumerate(similarity[4])),reverse=True,key=lambda x:x[1])[1:11] #it sort and store index of elements 
def recommend(coursse):
    coursse_index = new_dff[new_dff['Course']==coursse].index[0] # find the index as given by user
    distance = similarity[coursse_index]   #distance btw courses
    coursse_list = sorted(list(enumerate(distance)),reverse=True,key=lambda x:x[1])[1:11] 
    
    for i in coursse_list:
        print(new_dff.iloc[i[0]].Course)
        # print(i[0])
recommend('High-Impact Business Writing')
# fetching name from index:
# new_dff.iloc[3423].Course